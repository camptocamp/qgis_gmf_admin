# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GMFSynchronizer
                                 A QGIS plugin
 Synchronize GMF layer trree with QGIS project
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-01-22
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Camptocamp
        email                : info@camptocamp.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os.path

from qgis.core import QgsApplication
from qgis.PyQt import QtCore, QtGui, QtWidgets

from gmf_admin.core.settings import settings
from gmf_admin.widgets.settings_dialog import SettingsDialog


class GMFAdminPlugin:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QtCore.QSettings().value('locale/userLocale', QtCore.QLocale().name())[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'GMFSynchronizer_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QtCore.QTranslator()
            self.translator.load(locale_path)
            QtCore.QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QtCore.QCoreApplication.translate('GMFSynchronizer', message)

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        self.menu = self.tr('GMF Admin')
        self.toolbar = self.iface.addToolBar('GMF Admin')
        self.toolbar.setObjectName('GMF Admin')

        settings_action = QtWidgets.QAction(
            QgsApplication.getThemeIcon("/propertyicons/settings.svg"),
            self.tr('Settings'),
            self.iface.mainWindow(),
        )
        settings_action.triggered.connect(self.showSettings)
        self.iface.addPluginToMenu(self.menu, settings_action)
        self.toolbar.addAction(settings_action)
        self.actions.append(settings_action)

        synchronize_action = QtWidgets.QAction(
            QgsApplication.getThemeIcon("/mActionRefresh.svg"),
            self.tr('Synchronize'),
            self.iface.mainWindow(),
        )
        synchronize_action.triggered.connect(self.synchronize)
        self.iface.addPluginToMenu(self.menu, synchronize_action)
        self.toolbar.addAction(synchronize_action)
        self.actions.append(synchronize_action)

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr('GMF Admin'),
                action)
        self.toolbar.deleteLater()
        del self.toolbar

    def showSettings(self):
        dlg = SettingsDialog()
        dlg.exec_()

    def synchronize(self):
        url = QtCore.QUrl(
            os.path.join(
                settings.gmf_url,
                "admin/ogc_servers/{}/synchronize".format(settings.ogc_server_id)
            )
        )

        query = QtCore.QUrlQuery(url.query())
        query.addQueryItem("auth", settings.auth_token)
        url.setQuery(query)

        QtGui.QDesktopServices.openUrl(url)
